@page "/EventchangePractisePage"
@using Fitness_Tracker_App
@inject Data.DataService Data

<h3>A Page For Practicing All My Event Changes!!! </h3>

<h1>@currentHeading</h1>

<p>
    <label>
        New title
        <input @bind="newHeading" />
    </label>
    <button @onclick="UpdateHeading">Update heading </button>

</p>

<p>
    <label>
        <input type="checkbox" @onchange="CheckChanged" />
        @checkedMessage
    </label>
</p>



<h1>@currentHeading1</h1>

<p>
    <label>
        New title
        <input @bind="newHeading1" />
    </label>
    <button @onclick="UpdateHeading1"> Update heading </button>
</p>

<br />

<h3>Mouse Coordinates</h3>
<button class="btn btn-primary" @onclick="MouseClick">Button 1</button>

<br />
<br />

<button class="btn btn-primary" @onclick="MouseClick">Button 2</button>

<p>@mouseCoordinates</p>

<br />

<p>
    <input value="@count" @onkeydown="KeyHandler" @onkeydown:preventDefault />
</p>

<br />

<label>
    <input @bind="stopPropagation" type="checkbox" />
    Stop Propagation
</label>

<div class="m-1 p-1 border border-primary" @onclick="OnSelectParentDiv">
    <h3>Parent div</h3>

    <div class="m-1 p-1 border" @onclick="OnSelectChildDiv">
        Child div that doesn't stop propagation when selected.
    </div>

    <div class="m-1 p-1 border" @onclick="OnSelectChildDiv"
         @onclick:stopPropagation="stopPropagation">
        Child div that stops propagation when selected.
    </div>
</div>

<p>
    @message
</p>


@code {
    private string currentHeading = "Event Change Test heading";
    private string newHeading;
    private string checkedMessage = "Not changed yet";

    private void UpdateHeading()
    {
        currentHeading = $"{newHeading}";
    }

    private void CheckChanged()
    {
        /// shows when the event was changed last
        checkedMessage = $"Last changed at {DateTime.Now}";
    }




    /// <summary>
    /// 2nd event example
    /// </summary>

    private string currentHeading1 = "Event Change Test heading";
    private string newHeading1;

    private async Task UpdateHeading1()
    {
        ///waits 2 seconds before making change
        await Task.Delay(2000);

        currentHeading1 = $"{newHeading1}";
    }


    /// <summary>
    /// 3rd event example!
    /// </summary>
    private string mouseCoordinates;

    private void MouseClick(MouseEventArgs e)
    {
        //prints out position of the mouse over the click button
        mouseCoordinates = $"Mouse coordinates: {e.ScreenX}:{e.ScreenY}";
    }

    /// <summary>
    /// 4th event example
    /// </summary>
    ///
    private int count = 0;

    private void KeyHandler(KeyboardEventArgs e)
    {
        //only + key will effect the number count
        if (e.Key == "j")
        {
            count++;
        }
    }




    private bool stopPropagation = false;
    private string message;

    private void OnSelectParentDiv() =>
        message = $"The parent div was selected. {DateTime.Now}";

    private void OnSelectChildDiv() =>
        message = $"A child div was selected. {DateTime.Now}";


}
